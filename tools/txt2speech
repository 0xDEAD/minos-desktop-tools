#!/bin/sh
#description: txt2speech, text to speech
#usage: txt2speech [options] phrase

#example: txt2speech -en "hello world"
#audio plays saying "hello world"

VERSION="2015.12.18-16:31"

SPEECH_SYNTHESIZERS="google voicerss espeak"
SPEECH_SYNTHESIZERS_MEDIUM="voicerss google espeak"
SPEECH_SYNTHESIZERS_BIG="voicerss espeak"
SPEECH_SYNTHESIZERS_HUGE="espeak voicerss"
VOICERSS_TK='e7f014e16bcb48579bb1dbcd70149114'

progname="$(expr "${0}" : '.*/\([^/]*\)')"

#https://github.com/soimort/translate-shell/issues/94#issuecomment-165433715
py_google_tk_script="
import sys
import time
import ctypes

def RL(a, b):
    for c in range(0, len(b)-2, 3):
        d = b[c+2]
        d = ord(d) - 87 if d >= 'a' else int(d)
        xa = ctypes.c_uint32(a).value
        d = xa >> d if b[c+1] == '+' else xa << d
        a = a + d & 4294967295 if b[c] == '+' else a ^ d
    return ctypes.c_int32(a).value

def calc_tk(a):
    b = int(time.time() / 3600)
    if sys.version_info >= (3,):
        d = a.encode('utf-8')
    else:
        d = map(ord, a)
    a = b
    for di in d:
        a = RL(a + di, '+-a^+6')
    a = RL(a, '+-3^+b+-f')
    a = a if a >= 0 else ((a & 2147483647) + 2147483648)
    a %= pow(10, 6)
    return '%d.%d' % (a, a ^ b)

if __name__ == '__main__':
    text = ' '.join(sys.argv[1:])
    print(calc_tk(text))"

_usage() {
    printf "%s\\n" "Usage: ${progname} [options] [-sl] phrase"
    printf "%s\\n" "${progname}."
    printf "\\n"
    printf "%s\\n" "  sl   source language ('en' by default)"
    printf "\\n"
    printf "%s\\n" "  -s, --synth           select synthetizer"
    printf "%s\\n" "  -l, --list-synth      list available synthetizers"
    printf "%b\\n" "  -f, --file [file]     read from file"
    printf "%b\\n" "  -o, --output [file]   write to file"
    printf "%b\\n" "  -c, --clean-cache     remove temporal files"
    printf "%b\\n" "  -U, --update          update this program to latest version"
    printf "%s\\n" "  -h, --help            show this help message and exit"
}

_notify() {
    [ -z "${1}" ] && return 1
    if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
        kill -9 $(pgrep notify-osd) >/dev/null 2>&1
        if ! DISPLAY=:0 notify-send -t 1000 "${1}"  "${2}"; then
            if command -v "gxmessage" 2>/dev/null; then
                font="Monaco 9"
                gxmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            else
                font="fixed"
                xmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            fi
        fi
    else
        if [ -z "${2}" ]; then
            printf "%s\\n" "${1}"
        else
            printf "%s: %s\\n" "${1}" "${2}"
        fi
    fi
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_cat() {
    case "${2}" in
        -) cat "${1}" ;;
        *) cat "${1}" > "${2}" ;;
    esac
}

_check_synthesizer() {
    if [ -z "${1}" ]; then
        printf "%s\\n" "${progname}: available speech synthesizers are" >&2
        exec "${0}" --list-synthesizer >&2
    else
        printf "%s\\n" "${SPEECH_SYNTHESIZERS}" | tr ' ' '\n' |  \
            grep "^${1}$" >/dev/null ||         { printf "%s\\n" \
            "${progname}: '${1}' is not a recognized speech synthesizer" >&2
             exit 1; }
    fi
}

_txt2speech() {
    _txt2speech__google() {
        _tk() {
            if command -v "python" >/dev/null 2>&1; then
                printf "%s\\n" "${py_google_tk_script}" > /tmp/_tk.py
                python /tmp/_tk.py "${*}"
                rm -rf /tmp/_tk.py
            else
                #TODO 18-12-2015 12:36 >> additional tk implementations
                :
            fi
        }

        _txt2speech__google_fetch() {
            #strip empty spaces from beginning/end
            _tgfetch__buffer="$(printf "%s" "${1}" | \
                awk '{gsub(/^[ \t]+|[ \t]+$/, ""); print}')"
            #http://stackoverflow.com/questions/296536/urlencode-from-a-bash-script
            _tgfetch__buffer_encoded="$(printf "%b" "${_tgfetch__buffer}" | \
                xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g')"

            #https://github.com/zaf/asterisk-googletts
            _tgfetch__url="http://translate.google.com/translate_tts?ie=UTF-8"
            _tgfetch__url="${_tgfetch__url}&q=${_tgfetch__buffer_encoded}"
            _tgfetch__url="${_tgfetch__url}&tl=${SL}&total=1&idx=0"
            _tgfetch__url="${_tgfetch__url}&textlen=${#_tgfetch__buffer}"
            _tgfetch__url="${_tgfetch__url}&client=t"
            _tgfetch__url="${_tgfetch__url}&tk=$(_tk "${_tgfetch__buffer}")"

            _tgfetch__ua="User-Agent: Mozilla/5.0 (X11; Linux x86_64)"
            _tgfetch__ua="${_tgfetch__ua} AppleWebKit/537.36"
            _tgfetch__ua="${_tgfetch__ua} (KHTML, like Gecko)"
            _tgfetch__ua="${_tgfetch__ua} Chrome/45.0.2454.101"
            _tgfetch__ua="${_tgfetch__ua} Safari/537.36"

            wget -q -O- "${_tgfetch__url}" --header='Accept: */*' \
            --header='Accept-Encoding: identity;q=1, *;q=0'    \
            --header='Accept-Language: en-US,en;q=0.5' --header='DNT: 1' \
            --header='Range: bytes=0-' \
            --header='Referer: http://translate.google.com' \
            --header="${_tgfetch__ua}" > "${2}" || { rm -rf "${2}"
            printf "%s\\n" "WARNING: google api timeout" >&2; return 1; }
        }

        i="0"; _txt2speech__buffer=""; for word; do
            if [ "$((${#_txt2speech__buffer} + ${#word}))" -gt "99" ]; then
                i="$(($i + 1))"
                _txt2speech__google_fetch "${_txt2speech__buffer}" \
                    "${_txt2speech__tmp_dir}/$(printf "%05d.mp3" "${i}")" && \
                    _txt2speech__buffer="${word}" || return 1
            else
                _txt2speech__buffer="${_txt2speech__buffer} ${word}"
            fi
        done

        if [ -n "${_txt2speech__buffer}" ]; then
            i="$(($i + 1))"
            _txt2speech__google_fetch "${_txt2speech__buffer}" \
                "${_txt2speech__tmp_dir}/$(printf "%05d.mp3" "${i}")" || return 1
        fi

        cat "${_txt2speech__tmp_dir}"/*.mp3 > "${_txt2speech__tmp_dir}"/a.mp3 \
            2>/dev/null && _txt2speech "${_txt2speech__tmp_dir}"/a.mp3 || {   \
            rm -rf "${_txt2speech__tmp_dir}"/a.mp3; return 1; }
    }

    _txt2speech__voicerss() {
        _txt2speech__voicerss_fetch() {
            #strip empty spaces from beginning/end
            _tvfetch__buffer="$(printf "%s" "${1}" | \
                awk '{gsub(/^[ \t]+|[ \t]+$/, ""); print}')"
            #http://stackoverflow.com/questions/296536/urlencode-from-a-bash-script
            _tvfetch__buffer_encoded="$(printf "%b" "${_tvfetch__buffer}" | \
                xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g')"

            case "${SL}" in
                 ca) _tvfetch__SL="ca-es" ;;   zh) _tvfetch__SL="zh-cn" ;;
                 da) _tvfetch__SL="da-dk" ;;   nl) _tvfetch__SL="nl-nl" ;;
                 en) _tvfetch__SL="en-us" ;; 'fi') _tvfetch__SL="fi-fi" ;;
                 fr) _tvfetch__SL="fr-fr" ;;   de) _tvfetch__SL="de-de" ;;
                 it) _tvfetch__SL="it-it" ;;   ja) _tvfetch__SL="ja-jp" ;;
                 ko) _tvfetch__SL="ko-kr" ;;   nb) _tvfetch__SL="nb-no" ;;
                 pl) _tvfetch__SL="pl-pl" ;;   pt) _tvfetch__SL="pt-br" ;;
                 ru) _tvfetch__SL="ru-ru" ;;   es) _tvfetch__SL="es-mx" ;;
                 sv) _tvfetch__SL="sv-se" ;;   *)  _tvfetch__SL="${SL}" ;;
            esac

            _tvfetch__url="http://api.voicerss.org/"

            _tvfetch__post="key=${VOICERSS_TK}"
            _tvfetch__post="${_tvfetch__post}&src=${_tvfetch__buffer_encoded}"
            _tvfetch__post="${_tvfetch__post}&hl=${_tvfetch__SL}"
            _tvfetch__post="${_tvfetch__post}&f=12khz_16bit_stereo"

            wget -q -O- "${_tvfetch__url}" --post-data "${_tvfetch__post}" > "${2}"
            if grep "^ERROR" "${2}" >/dev/null 2>&1; then
                rm -rf "${2}"
                printf "%s\\n" "WARNING: voicerss api timeout" >&2; return 1;
            fi
        }

        i="0"; _txt2speech__buffer=""; for word; do
            if [ "$((${#_txt2speech__buffer} + ${#word}))" -gt "10000" ]; then
                i="$(($i + 1))"
                _txt2speech__voicerss_fetch "${_txt2speech__buffer}" \
                    "${_txt2speech__tmp_dir}/$(printf "%05d.mp3" "${i}")" && \
                    _txt2speech__buffer="${word}" || return 1
            else
                _txt2speech__buffer="${_txt2speech__buffer} ${word}"
            fi
        done

        if [ -n "${_txt2speech__buffer}" ]; then
            i="$(($i + 1))"
            _txt2speech__voicerss_fetch "${_txt2speech__buffer}" \
                "${_txt2speech__tmp_dir}/$(printf "%05d.mp3" "${i}")" || return 1
        fi

        cat "${_txt2speech__tmp_dir}"/*.mp3 > "${_txt2speech__tmp_dir}"/a.mp3 \
            2>/dev/null && _txt2speech "${_txt2speech__tmp_dir}"/a.mp3 || {   \
            rm -rf "${_txt2speech__tmp_dir}"/a.mp3; return 1; }
    }

    _txt2speech__espeak() {
        [ -z "${1}" ] && return 1
        espeak -v"${SL}"+f2 -s170 -p30 "${*}" --stdout > \
            "${_txt2speech__tmp_dir}"/a.mp3 && \
            _txt2speech "${_txt2speech__tmp_dir}"/a.mp3 || {  \
            rm -rf "${_txt2speech__tmp_dir}"/a.mp3;
            if command -v "espeak"; then
                printf "%s\\n" "WARNING: espeak isn't available" >&2;
            else
                printf "%s\\n" "WARNING: espeak invocation failed" >&2;
            fi
            return 1; }
    }

    [ -z "${1}" ] && return 1

    if [ -f "${1}" ]; then
        if [ -z "${OUTPUT_FNAME}" ]; then
            mplayer "${_txt2speech__tmp_dir}"/a.mp3 2>&1 >/dev/null
        else
            _cat "${_txt2speech__tmp_dir}"/a.mp3 "${OUTPUT_FNAME}"
        fi
        exit
    fi

    if command -v md5sum >/dev/null 2>&1; then
        _txt2speech__md5sum="$(printf "%s" "${*}" | md5sum | awk '{print $1}')"
    elif command -v md5 >/dev/null 2>&1; then
        _txt2speech__md5sum="$(printf "%s" "${*}" | md5 -r | awk '{print $1}')"
    elif command -v openssl >/dev/null 2>&1; then
        _txt2speech__md5sum="$(printf "%s" "${*}" | openssl dgst -md5 | awk '{print $2}')"
    else
        _txt2speech__md5sum="no_checksum_available"
    fi

    _txt2speech__tmp_dir="/tmp/txt2speech_${_txt2speech__md5sum}"
    mkdir /tmp 2>/dev/null; mkdir "${_txt2speech__tmp_dir}" 2>/dev/null

    [ -f "${_txt2speech__tmp_dir}/a.mp3" ] && _txt2speech "${_txt2speech__tmp_dir}/a.mp3"
    _txt2speech__txt="${*}"

    if [ -n "${USER_SELECTED_SPEECH_SYNTH}" ]; then
        _txt2speech__$USER_SELECTED_SPEECH_SYNTH "${_txt2speech__txt}"
    else
        if [ "${#_txt2speech__txt}" -lt "100" ]; then
            for SPEECH_SYNTH in $SPEECH_SYNTHESIZERS; do
                _txt2speech__$SPEECH_SYNTH "${_txt2speech__txt}" && break
            done
        elif [ "${#_txt2speech__txt}" -lt "5000" ]; then
            for SPEECH_SYNTH in $SPEECH_SYNTHESIZERS_MEDIUM; do
                _txt2speech__$SPEECH_SYNTH "${_txt2speech__txt}" && break
            done
        elif [ "${#_txt2speech__txt}" -lt "10000" ]; then
            for SPEECH_SYNTH in $SPEECH_SYNTHESIZERS_BIG; do
                _txt2speech__$SPEECH_SYNTH "${_txt2speech__txt}" && break
            done
        else
            for SPEECH_SYNTH in $SPEECH_SYNTHESIZERS_HUGE; do
                _txt2speech__$SPEECH_SYNTH "${_txt2speech__txt}" && break
            done
        fi
    fi
}

_update() {
    _u__current_file="$(cd "$(dirname "${0}")" && pwd)/${0}"
    _u__current_version_long="$(awk -F\" \
        '/VERSION=/{print $2;exit}' "${_u__current_file}" 2>/dev/null)"
    _u__current_version="$(printf "%s" "${_u__current_version_long}" | awk \
        '{gsub(/[\.:]/,"");gsub(/-/,"");print;exit}' 2>/dev/null)"
    [ -z "${_u__current_version}" ] && printf "%s\\n%s\\n%s\\n"    \
        "ERROR: Failed to detect current version, please update manually" \
        "${progname}         = ${_u__current_file}"                 \
        "${progname} version = ${_u__current_version}" >&2 && return 1

    command -v "wget" >/dev/null 2>&1 || command -v "curl" >/dev/null 2>&1 || { \
    printf "%s\\n" "ERROR: Install either 'wget' or 'curl' to update within the program" >&2
    return 1; }

    _u__error_msg="$(wget -q -O- --no-check-certificate \
    https://raw.githubusercontent.com/minos-org/minos-tools/master/tools/txt2speech \
        > "/tmp/${progname}.${$}" >/dev/null || curl -s  \
    https://raw.githubusercontent.com/minos-org/minos-tools/master/tools/txt2speech \
    > "/tmp/${progname}.${$}" >/dev/null)" || { printf "%s\\n%s\\n" \
        "ERROR: Failed to fetch update, please try later or update manually" \
        "${_u__error_msg}" >&2; return 1; }

    _u__update_version_long="$(awk -F\" \
        '/VERSION=/{print $2;exit}' "/tmp/${progname}.${$}" 2>/dev/null)"
    _u__update_version="$(printf "%s" "${_u__update_version_long}" | awk \
        '{gsub(/[\.:]/,"");gsub(/-/,"");print;exit}' 2>/dev/null)"
    [ -z "${_u__update_version}" ] && _u__update_version="0"

    if [ "${_u__current_version}" -lt "${_u__update_version}" ]; then
        printf "%s %s\\n" "Updating from version" \
            "${_u__current_version_long} to ${_u__update_version_long} ..."
        if ! mv "/tmp/${progname}.${$}" "${_u__current_file}" 2>/dev/null; then
            printf "%s\\n" "ERROR: no write permissions on ${_u__current_file}" >&2
            printf "%s\\n" "INFO : trying with sudo ..."
            if command -v "sudo" >/dev/null 2>&1; then
                sudo mv "/tmp/${progname}.${$}" "${_u__current_file}" || return 1
            else
                printf "%s\\n" "ERROR: sudo isn't available, exiting ..."
                rm -rf "/tmp/${progname}.${$}"; return 1
            fi
        fi
    fi
    printf "%s %s\\n" "${progname} is up-to-date (${_u__current_version_long})"
    rm -rf "/tmp/${progname}.${$}"
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

[ "${#}" -eq "0" ] && _die

for arg; do #parse options
    case "${arg}" in
        -h|--help) _usage && exit ;;
        -l|--list-synth)
            for SPEECH_SYNTH in $SPEECH_SYNTHESIZERS; do
                printf "%s\\n" "${SPEECH_SYNTH}"
            done
            exit ;;
        '-s'|'--synthesizer')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; USER_SELECTED_SPEECH_SYNTH="${1}"; [ "${1}" ] && shift
                _check_synthesizer "${USER_SELECTED_SPEECH_SYNTH}"
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -s*) USER_SELECTED_SPEECH_SYNTH="${1#-s}"; shift
            _check_synthesizer "${USER_SELECTED_SPEECH_SYNTH}" ;;
        --synthesizer*) USER_SELECTED_SPEECH_SYNTH="${1#--synthesizer}"; shift
            _check_synthesizer "${USER_SELECTED_SPEECH_SYNTH}" ;;
        '-f'|'--file')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                     -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; INPUT_FNAME="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -f*) INPUT_FNAME="${1#-f}"; shift ;;
        --file*) INPUT_FNAME="${1#--file}"; shift ;;
        '-o'|'--output')
            if [ "${#}" -gt "1" ]; then
                case "${2}" in
                    '-') : ;;
                     -*) _die "Option '${arg}' requires a parameter" ;;
                esac
                shift; OUTPUT_FNAME="${1}"; [ "${1}" ] && shift
            else
                _die "Option '${arg}' requires a parameter"
            fi ;;
        -o*) OUTPUT_FNAME="${1#-o}"; shift ;;
        --output*) OUTPUT_FNAME="${1#--output}"; shift ;;
        -c|--clean-cache) rm -rf /tmp/txt2speech_* && \
            printf "%s\\n" "Cache cleared successfully" && exit ;;
        -U|--update) _update; exit "${?}" ;;
        '-') : ;; #special stdout character
        --*) _die "${progname}: unrecognized option '${arg}'" ;;
    esac
done

[ ! -f "$(command -v "mplayer")" ] && \
    _notify "[-] Error" "install 'mplayer' to run this program" 2>&1 && exit 1

if [ -f "$(command -v "xclip")" ]; then
    clipboard="xclip -selection clipboard -o"
elif [ -f "$(command -v "sselp")" ]; then
    clipboard="sselp"
else
    clipboard="echo clipboard unavailable"
fi

case "${1}" in
    '-') SL="en" ;;
    -*) SL="${1#*-}"
        #maybe returning an error message could be better better
        [ -z "${SL}" ] && SL="en"; shift
        SL="$(printf "%s" "${SL}" | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \
            'abcdefghijklmnopqrstuvwxyz')"
        ;;
    *)  SL="en" ;;
esac

if [ -z "${INPUT_FNAME}" ]; then
    phrase="${@}"
    #last char
    phrase_tmp="${phrase%?}"
    if [ X"${phrase#$phrase_tmp}" = X"-" ]; then
        phrase="${phrase%?}"
        phrase="${phrase} $(${clipboard})"
    fi
    _txt2speech "${phrase}"
else
    if [ -s "${INPUT_FNAME}" ]; then
        _txt2speech "$(cat "${INPUT_FNAME}")"
    else
        _die "Input file '${INPUT_FNAME}' is empty or doesn't exists"
    fi
fi
