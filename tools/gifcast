#!/bin/sh
#description: record a gif movie from a selected region
#usage: gifcast [filename.gif]

progname="$(expr "${0}" : '.*/\([^/]*\)')"

_usage() {
    printf "%s\\n" "Usage: ${progname} [options] file.gif"
    printf "%s\\n" "Record a gif movie from a selected region."
    printf "\\n"
    printf "%s\\n" "  -h, --help   show this help message and exit"
}

_die() {
    [ -z "${1}" ] || printf "%s\\n" "${*}" >&2
    _usage >&2; exit 1
}

_notify() {
    [ -z "${1}" ] && return 1
    if [ X"${TERM}" = X"linux" ] || [ -z "${TERM}" ]; then
        kill -9 $(pgrep notify-osd) >/dev/null 2>&1
        if ! DISPLAY=:0 notify-send -t 1000 "${1}"  "${2}"; then
            if command -v "gxmessage" 2>/dev/null; then
                font="Monaco 9"
                gxmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            else
                font="fixed"
                xmessage "${font:+-fn "$font"}" "${1} ${2}" "ok"
            fi
        fi
    else
        if [ -z "${2}" ]; then
            printf "%s\\n" "${1}"
        else
            printf "%s: %s\\n" "${1}" "${2}"
        fi
    fi
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

for arg; do
    case "${arg}" in
        --) shift; break ;;
        -h|--help) _usage && exit ;;
        -*) _die "${progname}: unrecognized option '${arg}'" ;;
    esac
done

if ! command -v "ffcast" >/dev/null 2>&1; then
    _notify "[-] Error" "install 'ffcast' to run this program"
    exit 1
elif ! command -v "convert" >/dev/null 2>&1; then
    _notify "[-] Error" "install 'convert' to run this program"
    exit 1
fi

random_name="$(</dev/urandom tr -dc A-Za-z0-9 | head -c 8)"
tmp_avi="/tmp/${random_name}.${$}.avi"
trap 'rm -f -- "${tmp_avi}"' INT TERM HUP EXIT

if [ -n "${1}" ]; then
    output_file="${1}"
else
    output_file="${HOME}/${random_name}.gif"
fi

case "${output_file}" in
    *.gif) : ;;
        *) _die ;;
esac

_notify "[+] Gifcast" "in 3.., 2.., 1.., smile =)!"

set -e

ffcast -s ffmpeg -r 20 -- -vcodec huffyuv "${tmp_avi}"
_notify "[+] Optimising" "${output_file}"
convert -layers Optimize -set delay 10 "${tmp_avi}" "${output_file}"
rm -rf "${tmp_avi}"
_notify "[+] Done" "${output_file}"

set +e

if command -v "xclip" >/dev/null 2>&1; then
    printf "%s" "${output_file}" 2>/dev/null | xclip -selection clipboard
fi
