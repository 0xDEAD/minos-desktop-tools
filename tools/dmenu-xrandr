#!/bin/sh
#description: dmenu based multimonitor menu
#usage: dmenu-xrandr is best suited for launching from a shortcut

#example: dmenu-xrandr
#a gui menu appears asking for which resolution to apply

#looks better with a xft powered dmenu:
#https://bugs.launchpad.net/ubuntu/+source/suckless-tools/+bug/1093745
DMENU='dmenu -p > -i -fn Bahamas-10 -nb #000000 -nf #FFFFFF -sb #000000 -sf #999999'

_die()
{
    [ -z "${1}" ] && _die_msg="dmenu" || _die_msg="${1}"
    printf "%b%b\\n" "${_die_msg}" ", press <Enter> to exit" | ${DMENU}
    exit 1
}

_arraylen()
{
    [ -z "${1}" ] && return 1
    _arraylen__counter="0"
    _arraylen__copy="${1}"

    while [ "${_arraylen__copy}" ]; do
        _arraylen__option="${_arraylen__copy%%,*}"
        _arraylen__counter="$((${_arraylen__counter} + 1))"

        if [ X"${_arraylen__option}" = X"${_arraylen__copy}" ]; then
            _arraylen__copy=""
        else
            _arraylen__copy="${_arraylen__copy#*,}"
        fi
    done

    printf "%s" "${_arraylen__counter}"
}

_str2lower()
{
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'
}

_gen_rotate_opts()
{
    [ -z "${1}" ] && return 1
    _gen_rotate_opts__copy="${rotate}"
    _gen_rotate_opts__string=""

    while [ "${_gen_rotate_opts__copy}" ]; do
        _gen_rotate_opts__option="${_gen_rotate_opts__copy%%,*}"

        case "${active_outputs}" in
            *"${1}"*) _gen_rotate_opts__string="${_gen_rotate_opts__string}${1}.rotate.${_gen_rotate_opts__option}", ;;
        esac

        if [ X"${_gen_rotate_opts__option}" = X"${_gen_rotate_opts__copy}" ]; then
            _gen_rotate_opts__copy=""
        else
            _gen_rotate_opts__copy="${_gen_rotate_opts__copy#*,}"
        fi
    done

    printf "%s" "${_gen_rotate_opts__string}"
}

_gen_offauto_opts()
{
    [ -z "${1}" ] && return 1
    #never turn off laptop screen
    [ X"${1}" = X"LVDS1" ] && return

    _gen_offauto_opts__copy="${offauto}"
    _gen_offauto_opts__string=""
    #if [ X"${active_outputs_len}" = X"1" ]; then
        #_gen_offauto_opts__copy="$(printf "%s" "${_gen_offauto_opts__copy}" | cut -d, -f2-)"
    #fi

    while [ "${_gen_offauto_opts__copy}" ]; do
        _gen_offauto_opts__option="${_gen_offauto_opts__copy%%,*}"
        _gen_offauto_opts__string="${_gen_offauto_opts__string}${1}.${_gen_offauto_opts__option}",

        if [ X"${_gen_offauto_opts__option}" = X"${_gen_offauto_opts__copy}" ]; then
            _gen_offauto_opts__copy=""
        else
            _gen_offauto_opts__copy="${_gen_offauto_opts__copy#*,}"
        fi
    done

    printf "%s" "${_gen_offauto_opts__string}"
}

_gen_resolution_opts()
{
    [ -z "${1}" ] && return 1

    eval _gen_resolution_opts__copy=\$mode_$1
    _gen_resolution_opts__string=""

    while [ "${_gen_resolution_opts__copy}" ]; do
        _gen_resolution_opts__option="${_gen_resolution_opts__copy%%,*}"
        _gen_resolution_opts__string="${_gen_resolution_opts__string}${1}.mode.${_gen_resolution_opts__option}",

        if [ X"${_gen_resolution_opts__option}" = X"${_gen_resolution_opts__copy}" ]; then
            _gen_resolution_opts__copy=""
        else
            _gen_resolution_opts__copy="${_gen_resolution_opts__copy#*,}"
        fi
    done

    printf "%s" "${_gen_resolution_opts__string}"
}

_gen_position_opts()
{
    [ -z "${1}" ] && return 1
    [ "${connected_outputs_len}" -lt "2" ] && return 1
    case "${active_outputs}" in
        *"${1}"*) return 1 ;;
    esac

    _gen_position_opts__copy="${position}"
    _gen_position_opts__string=""

    while [ "${_gen_position_opts__copy}" ]; do
        _gen_rotate_opts__option="${_gen_position_opts__copy%%,*}"

        _gen_position_opts__string="${_gen_position_opts__string}${1}.${_gen_rotate_opts__option}.${active_outputs%%,*}",

        if [ X"${_gen_rotate_opts__option}" = X"${_gen_position_opts__copy}" ]; then
            _gen_position_opts__copy=""
        else
            _gen_position_opts__copy="${_gen_position_opts__copy#*,}"
        fi
    done

    printf "%s" "${_gen_position_opts__string}"
}

_gen_mix_opts()
{
    [ -z "${1}" ] && return 1
    [ "${connected_outputs_len}" -lt "2" ] && return 1
    case "${active_outputs}" in
        *"${1}"*) return 1 ;;
    esac

    eval _gen_mix_opts__resolutions=\$mode_$1
    _gen_mix_opts__positions="${position}"
    _gen_position_opts__string=""

    while [ "${_gen_mix_opts__resolutions}" ]; do
        _gen_mix_opts__resolution="${_gen_mix_opts__resolutions%%,*}"

        #comment to only provide all options to the highest resolution
        _gen_mix_opts__positions="${position}"
        while [ "${_gen_mix_opts__positions}" ]; do
            _gen_mix_opts__position="${_gen_mix_opts__positions%%,*}"
            _gen_position_opts__string="${_gen_position_opts__string}${1}.mode.${_gen_mix_opts__resolution}.${_gen_mix_opts__position}.${active_outputs%%,*}",

            if [ X"${_gen_mix_opts__position}" = X"${_gen_mix_opts__positions}" ]; then
                _gen_mix_opts__positions=""
            else
                _gen_mix_opts__positions="${_gen_mix_opts__positions#*,}"
            fi
        done

        if [ X"${_gen_mix_opts__resolution}" = X"${_gen_mix_opts__resolutions}" ]; then
            _gen_mix_opts__resolutions=""
        else
            _gen_mix_opts__resolutions="${_gen_mix_opts__resolutions#*,}"
        fi
    done

    printf "%s" "${_gen_position_opts__string}"
}

_reload_wallpaper()
{
    if command -v "feh" >/dev/null 2>&1; then
        if [ -f "$(minos-config wallpaper 2>/dev/null)" ]; then
            feh --bg-scale "$(minos-config wallpaper 2>/dev/null)"
        fi
    fi
}

if ! command -v "dmenu" >/dev/null 2>&1; then
    printf "%s\\n" "install 'dmenu' to run this program" >&2
    exit 1
elif ! command -v "xrandr" >/dev/null 2>&1; then
    _die "install 'xrandr' to run this program"
fi

xrandr_output="$(xrandr)"
all_outputs="$(printf "%s" "${xrandr_output}"       | awk '/^V|^L|^H|^D/ {print $1","}'     | tr -d '\n')"
connected_outputs="$(printf "%s" "${xrandr_output}" | awk '/ connected/ {print $1","}'      | tr -d '\n')"
active_outputs="$(printf "%s" "${xrandr_output}"    | awk '/ connected [^(]/ {print $1","}' | tr -d '\n')"
rotate="normal,inverted,left,right"
offauto="off,auto"
position="above,below,same-as,left-of,right-of"
connected_outputs_len="$(_arraylen "${connected_outputs}")"
active_outputs_len="$(_arraylen "${active_outputs}")"

[ -z "${connected_outputs}" ] && _die "unable to detect screen interfaces"

#create mode for each output
outputs_copy="${connected_outputs}"
while [ "${outputs_copy}" ]; do
    outputs_option="${outputs_copy%%,*}"
    mode_tmp="$(printf "%s" "${xrandr_output}" | awk '/'"${outputs_option}"'/ {flag=1;next} /^[A-Za-z]/{flag=0} flag {print $1","}' | \
                sort -nr | tr -d '\n')"
    eval mode_"${outputs_option}"=\$mode_tmp
    mode_tmp=""

    if [ X"${outputs_option}" = X"${outputs_copy}" ]; then
        outputs_copy=""
    else
        outputs_copy="${outputs_copy#*,}"
    fi
done

OLDIFS="${IFS}"
IFS=,
for output in ${connected_outputs}; do
    #mix resolution and position entries
    options="${options}$(_gen_mix_opts "${output%%,*}")"
    #rotate entries
    options="${options}$(_gen_rotate_opts "${output%%,*}")"
    #resolution entries
    options="${options}$(_gen_resolution_opts "${output%%,*}")"
    #position entries
    options="${options}$(_gen_position_opts "${output%%,*}")"
    #off-auto entries
    [ X"${active_outputs_len}" = X"1" ] && continue
    options="${options}$(_gen_offauto_opts "${output%%,*}")"
done

#show off entries for every detected device when there is no cable attached
#useful when you forgot to run dmenu-xrandr to disconnect gracesfully
#the monitor and wanna get back your environment
if [ X"${active_outputs_len}" = X"1" ]; then
    for output in ${all_outputs}; do
        options="${options}$(_gen_offauto_opts "${output%%,*}")"
    done
fi
IFS="${OLDIFS}"

options="$(printf "%s" "${options}"   | sed 's:,:\n:g')"
choice="$(printf "%b\\n" "${options}" | ${DMENU})"
printf "%s\\n" "${choice}"

[ -z "${choice}" ] && exit 1

cmd="xrandr --output $(printf "%s" "${choice}" | cut -d. -f1)"
case $(printf "%s" "${choice}" | cut -d. -f2) in
    mode)
        if [ -n "$(printf "%s" "${choice}" | cut -d. -f4)" ]; then
            cmd="${cmd}"" --$(printf "%s" "${choice}" | cut -d. -f2) ""$(printf "%s" "${choice}" | cut -d. -f3)"
            cmd="${cmd}"" --$(printf "%s" "${choice}" | cut -d. -f4) ""$(printf "%s" "${choice}" | cut -d. -f5)"
        else
            cmd="${cmd}"" --$(printf "%s" "${choice}" | cut -d. -f2) ""$(printf "%s" "${choice}" | cut -d. -f3)"
        fi
        ;;
    auto|off) cmd="${cmd}"" --$(printf "%s" "${choice}" | cut -d. -f2)" ;;
    same-as)  cmd="${cmd}"" --auto --$(printf "%s" "${choice}" | cut -d. -f2) ""$(printf "%s" "${choice}" | cut -d. -f3)" ;;
    *)        cmd="${cmd}"" --$(printf "%s" "${choice}" | cut -d. -f2) ""$(printf "%s" "${choice}" | cut -d. -f3)" ;;
esac

sh -c "${cmd}" && _reload_wallpaper
