#!/bin/sh
#description: minos-config query program
#usage: minos-config [options] key

#example: minos-config general-wallpaper
#/usr/share/minos/wallpapers/minos.png

_usage()
{
    printf "%s\\n" "Usage: $(expr "${0}" : '.*/\([^/]*\)') [options] key" >&2
    printf "%s\\n" "Query tool for minos configuration files." >&2
    printf "\\n" >&2
    printf "%s\\n" "  -c, --config   read values from this configuration file" >&2
    printf "%s\\n" "  -d, --dump     dump detected keys and its values" >&2
    printf "%s\\n" "  -h, --help     show help (this text)" >&2
    exit 1
}

_die()
{
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${*}" >&2
    _usage
}

_get_minos_config()
{
    [ -z "${1}" ] && return 1
    [ -z "${config_file}" ] &&                               \
        _gmc_var_option="$(awk -v pattern="^${1} "           \
            '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
            "${HOME}"/.minos/config 2>/dev/null)" ||         \
        _gmc_var_option="$(awk -v pattern="^${1} "           \
            '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
            "${config_file}" 2>/dev/null)"
    [ -z "${_gmc_var_option}" ] &&                           \
        _gmc_var_option="$(awk -v pattern="^${1} "           \
            '$0 ~ pattern {$1=""; print substr($0,2); exit}' \
            /etc/minos/config 2>/dev/null)"
    [ -z "${_gmc_var_option}" ] && return 1 ||               \
        { eval _gmc_var_option="${_gmc_var_option}";         \
          printf "%s\\n" "${_gmc_var_option}"; }
}

_dump_minos_config()
{
    [ -z "${config_file}" ] && \
        _dpc_var_home=$(awk '!/^#|^$/' "${HOME}"/.minos/config 2>/dev/null) || \
        _dpc_var_home=$(awk '!/^#|^$/' "${config_file}" 2>/dev/null)
    _dpc_var_etc=$(awk '!/^#|^$/'  /etc/minos/config 2>/dev/null)
    printf "%s\n%s" "${_dpc_var_home}" "${_dpc_var_etc}" |   \
        awk '!a[$1]++ {sub(/[ \t]+/,"#"); print}' | sort -k 1 | column -s# -t

    [ -z "${_dpc_var_home}" ] && [ -z "${_dpc_var_etc}" ] && \
        exit 1 || exit 0
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- $(for arg in "${@}"; do printf "%s\\n" "${arg}"; done) $(cat)
fi

[ -z "${1}" ] && _usage

for arg; do #parse options
    case "${arg}" in
        --) shift;   break  ;;
        -h|--help)   _usage ;;
        -d|--dump)   _dump_minos_config  ;;
        -c|--config)
            if [ "${#}" -gt "1" ]; then
                shift; config_file="${1}"; shift
                [ -r "${config_file}" ] || \
                    _die "'${config_file}' is not a valid configuration file"
            else
                _die "Option \`${arg}' requires a config file"
            fi
            ;;
        -*) _die "$(expr "${0}" : '.*/\([^/]*\)'): unrecognized option \`${arg}'" ;;
    esac
done

_get_minos_config "${1}"
